Работа с файлами

Разделяется на:
 - взаимодействие с файловой системой: поиск, навигация по папкам, копирование/перенос/удаление файлов и папок
 - использование файлов для хранения информации
   = сериализация - сохранение объектов и их коллекций

Сохранение информации в файлах
Большинство средств для работы с файлами находятся в пространстве имен System.IO(input/output)
StreamWriter - класс для записи в файл

(файл) - (ОС	-	буфер в RAM) - (Поток) - (Программа)
		flush()		| byte[]			<-	Serialize  <-	Write
	data <----------|
					| если в этот момент программа закроется, на диск данные не попадут

writer.WriteLine("Hello Files2!");	// Открытие файла для записи - содержимое стирается (если было)
// writer.Flush(); // "скинуть" буфер на диск (досрочная запись) - файл остается открытым, можно дальше писать
// writer.Close(); // закрыть файл, если буфер не пустой, то он "скидывается"
writer.Dispose(); // более современный подход - через интерфейс IDisposible

Для ресурсов которые реализуют интерфейс IDisposible рекомендуется блок с авторазрушением using() {}
После закрытия фигурной скобки - .Dispose() будет вызван автоматически
-------------------------------------
Часть 2
Навигация, поиск, список
! При задании имен файлов часто используют символ "@" перед строкой
@"" - цитирование, строка "как" есть - не заменяются спец. символы ("\n")
"Hello\n" - "hello" + перевод строки
@"Hello\n" - Hello\n (без перевода строки)

System.Io. File - набор статических методов для работы с файлами 
		   Directory - ... с директориями (папками)

Directory.EnumerateFiles(path) - возвращает коллекцию имен файлов
Directory.GetFiles(path)	- возвращает массив имен

Коллекция - реализует "ленивое" выполнение - следующий элдемент извлекается во время запроса (при итерации цикла)
Массив - сразу получает все имена
При очень большой перечне файлов их имена могут просто не поместиться с отведенной памяти
